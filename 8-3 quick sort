#include <stdio.h>
#include <stdlib.h>

#define MAX 10000

typedef struct {
    int u, v, w;
} Edge;

typedef struct {
    int parent, rank;
} Subset;

Edge edges[MAX];
int edgeCount;

void makeSet(Subset subsets[], int n) {
    for (int i = 0; i < n; ++i) {
        subsets[i].parent = i;
        subsets[i].rank = 0;
    }
}

int find(Subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);
    return subsets[i].parent;
}

void unionSets(Subset subsets[], int x, int y) {
    int rootX = find(subsets, x);
    int rootY = find(subsets, y);

    if (subsets[rootX].rank < subsets[rootY].rank)
        subsets[rootX].parent = rootY;
    else if (subsets[rootX].rank > subsets[rootY].rank)
        subsets[rootY].parent = rootX;
    else {
        subsets[rootY].parent = rootX;
        subsets[rootX].rank++;
    }
}

int compareEdges(const void *a, const void *b) {
    Edge *edgeA = (Edge *)a;
    Edge *edgeB = (Edge *)b;
    return edgeA->w - edgeB->w;
}

void kruskalMST(int n) {
    Subset *subsets = (Subset *)malloc(n * sizeof(Subset));
    makeSet(subsets, n);

    qsort(edges, edgeCount, sizeof(Edge), compareEdges);

    Edge result[MAX];
    int e = 0;
    int i = 0;

    while (e < n - 1 && i < edgeCount) {
        Edge nextEdge = edges[i++];

        int x = find(subsets, nextEdge.u);
        int y = find(subsets, nextEdge.v);

        if (x != y) {
            result[e++] = nextEdge;
            unionSets(subsets, x, y);
        }
    }

    printf("Edges in the MST:\n");
    for (i = 0; i < e; ++i)
        printf("%d -- %d == %d\n", result[i].u, result[i].v, result[i].w);

    free(subsets);
}

int main() {
    int n, m;
    printf("Enter the number of vertices and edges: ");
    scanf("%d %d", &n, &m);

    printf("Enter the edges (u, v, w) one by one:\n");
    for (int i = 0; i < m; ++i) {
        scanf("%d %d %d", &edges[edgeCount].u, &edges[edgeCount].v, &edges[edgeCount].w);
        edgeCount++;
    }

    kruskalMST(n);

    return 0;
}
