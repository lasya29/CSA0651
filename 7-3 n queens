#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

#define MAX 100

// Global variable to store the solution count
int solution_count = 0;

// Function to print the board configuration for one solution
void printBoard(int board[MAX][MAX], int n) {
    printf("Solution %d:\n", solution_count++);
    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if (board[i][j] == 1) printf("Q ");
            else printf(". ");
        }
        printf("\n");
    }
    printf("\n");
}

// Function to check if a queen can be placed at board[row][col]
bool isSafe(int board[MAX][MAX], int row, int col, int n) {
    // Check the column on the left side
    for (int i = 0; i < col; ++i)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; --i, --j)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (int i = row, j = col; j >= 0 && i < n; ++i, --j)
        if (board[i][j])
            return false;

    return true;
}

// Recursive function to solve N-Queens problem
bool solveNQueensUtil(int board[MAX][MAX], int col, int n) {
    // If all queens are placed, print the solution
    if (col == n) {
        printBoard(board, n);
        return true;
    }

    bool res = false;
    for (int i = 0; i < n; ++i) {
        // Check if the queen can be placed on board[i][col]
        if (isSafe(board, i, col, n)) {
            // Place the queen
            board[i][col] = 1;

            // Recur to place rest of the queens
            res = solveNQueensUtil(board, col + 1, n) || res;

            // If placing queen in board[i][col] doesn't lead to a solution, backtrack
            board[i][col] = 0; // Backtrack
        }
    }

    return res;
}

// Function to solve N-Queens problem
void solveNQueens(int n) {
    int board[MAX][MAX];
    solution_count = 0;

    // Initialize the board
    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            board[i][j] = 0;

    if (!solveNQueensUtil(board, 0, n)) {
        printf("No solution exists for N = %d.\n", n);
    }
}

// Main function to test the program
int main() {
    int n;
    printf("Enter the value of N for N-Queens problem: ");
    scanf("%d", &n);

    solveNQueens(n);

    return 0;
}
